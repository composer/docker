name: Docker - v1

on:
  pull_request: null
  push:
    paths:
      - .github/workflows/v1.yaml
      - '1.10/**'

env:
  AWS_REGION: us-east-1
  ECR_REPO: public.ecr.aws/u0u1j5s3/composer

jobs:
  build:
    name: Build EOL version
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        version:
          - "1.10"
    steps:
      - uses: actions/checkout@v4
      # Build full image: binary with runtime
      - name: Build full image
        working-directory: ${{ matrix.version }}
        run: |
          docker build \
          --pull \
          --no-cache \
          --target binary-with-runtime \
          --tag composer/composer:1 \
          --tag composer/composer:${{ matrix.version }} \
          --tag composer/composer:$(grep -oP 'COMPOSER_VERSION ${{ matrix.version }}.\d+' Dockerfile | grep -oP '${{ matrix.version }}.\d+') \
          .
      # Build low-size image with binary only
      - name: Build binary-only image
        working-directory: ${{ matrix.version }}
        run: |
          docker build \
          --pull \
          --no-cache \
          --target standalone-binary \
          --tag composer/composer:1-bin \
          --tag composer/composer:${{ matrix.version }}-bin \
          --tag composer/composer:$(grep -oP 'COMPOSER_VERSION ${{ matrix.version }}.\d+' Dockerfile | grep -oP '${{ matrix.version }}.\d+')-bin \
          .
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push tag(s) to Docker Hub
        if: github.ref == 'refs/heads/main'
        working-directory: ${{ matrix.version }}
        run: |
          docker push composer/composer:1
          docker push composer/composer:1-bin
          docker push composer/composer:${{ matrix.version }}
          docker push composer/composer:${{ matrix.version }}-bin
          docker push composer/composer:$(grep -oP 'COMPOSER_VERSION ${{ matrix.version }}.\d+' Dockerfile | grep -oP '${{ matrix.version }}.\d+')
          docker push composer/composer:$(grep -oP 'COMPOSER_VERSION ${{ matrix.version }}.\d+' Dockerfile | grep -oP '${{ matrix.version }}.\d+')-bin
      - name: Login to Amazon Public ECR
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          password: ${{ secrets.AWS_ECR_SECRET_KEY }}
      - name: Push tag(s) to Amazon Public ECR
        if: github.ref == 'refs/heads/main'
        working-directory: ${{ matrix.version }}
        run: |
          docker tag composer/composer:1 ${{ env.ECR_REPO }}:1
          docker tag composer/composer:1-bin ${{ env.ECR_REPO }}:1-bin
          docker tag composer/composer:${{ matrix.version }} ${{ env.ECR_REPO }}:${{ matrix.version }}
          docker tag composer/composer:${{ matrix.version }}-bin ${{ env.ECR_REPO }}:${{ matrix.version }}-bin
          docker tag composer/composer:$(grep -oP 'COMPOSER_VERSION ${{ matrix.version }}.\d+' Dockerfile | grep -oP '${{ matrix.version }}.\d+') ${{ env.ECR_REPO }}:$(grep -oP 'COMPOSER_VERSION ${{ matrix.version }}.\d+' Dockerfile | grep -oP '${{ matrix.version }}.\d+')
          docker tag composer/composer:$(grep -oP 'COMPOSER_VERSION ${{ matrix.version }}.\d+' Dockerfile | grep -oP '${{ matrix.version }}.\d+')-bin ${{ env.ECR_REPO }}:$(grep -oP 'COMPOSER_VERSION ${{ matrix.version }}.\d+' Dockerfile | grep -oP '${{ matrix.version }}.\d+')-bin
          docker push ${{ env.ECR_REPO }}:1
          docker push ${{ env.ECR_REPO }}:1-bin
          docker push ${{ env.ECR_REPO }}:${{ matrix.version }}
          docker push ${{ env.ECR_REPO }}:${{ matrix.version }}-bin
          docker push ${{ env.ECR_REPO }}:$(grep -oP 'COMPOSER_VERSION ${{ matrix.version }}.\d+' Dockerfile | grep -oP '${{ matrix.version }}.\d+')
          docker push ${{ env.ECR_REPO }}:$(grep -oP 'COMPOSER_VERSION ${{ matrix.version }}.\d+' Dockerfile | grep -oP '${{ matrix.version }}.\d+')-bin
