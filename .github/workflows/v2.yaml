name: Docker - v2

on:
  push:
    paths:
    - .github/workflows/v2.yaml
    - '2.*/**'

env:
  AWS_REGION: us-east-1
  ECR_REPO: public.ecr.aws/u0u1j5s3/composer

jobs:
  build22:
    name: Build v2.2
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: '2.2'
    steps:
    - uses: actions/checkout@v3
    # Build full image: binary with runtime
    - name: Build full image
      run: |
        docker build \
        --pull \
        --no-cache \
        --target binary-with-runtime \
        --tag composer/composer:lts \
        --tag composer/composer:2.2 \
        --tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.2.\d+' Dockerfile | grep -oP '2.2.\d+') \
        .
    # Build low-size image with binary only
    - name: Build binary-only image
      run: |
        docker build \
        --pull \
        --no-cache \
        --target standalone-binary \
        --tag composer/composer:lts-bin \
        --tag composer/composer:2.2-bin \
        --tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.2.\d+' Dockerfile | grep -oP '2.2.\d+')-bin \
        .
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Push tag(s) to Docker Hub
      if: github.ref == 'refs/heads/main'
      run: |
        docker push composer/composer:lts
        docker push composer/composer:lts-bin
        docker push composer/composer:2.2
        docker push composer/composer:2.2-bin
        docker push composer/composer:$(grep -oP 'COMPOSER_VERSION 2.2.\d+' Dockerfile | grep -oP '2.2.\d+')
        docker push composer/composer:$(grep -oP 'COMPOSER_VERSION 2.2.\d+' Dockerfile | grep -oP '2.2.\d+')-bin
    - name: Login to Amazon Public ECR
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v1
      with:
        registry: public.ecr.aws
        username: ${{ secrets.AWS_ECR_ACCESS_KEY }}
        password: ${{ secrets.AWS_ECR_SECRET_KEY }}
    - name: Push tag(s) to Amazon Public ECR
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag composer/composer:lts $ECR_REPO:lts
        docker tag composer/composer:lts-bin $ECR_REPO:lts-bin
        docker tag composer/composer:2.2 $ECR_REPO:2.2
        docker tag composer/composer:2.2-bin $ECR_REPO:2.2-bin
        docker tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.2.\d+' Dockerfile | grep -oP '2.2.\d+') $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.2.\d+' Dockerfile | grep -oP '2.2.\d+')
        docker tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.2.\d+' Dockerfile | grep -oP '2.2.\d+')-bin $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.2.\d+' Dockerfile | grep -oP '2.2.\d+')-bin
        docker push $ECR_REPO:lts
        docker push $ECR_REPO:lts-bin
        docker push $ECR_REPO:2.2
        docker push $ECR_REPO:2.2-bin
        docker push $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.2.\d+' Dockerfile | grep -oP '2.2.\d+')
        docker push $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.2.\d+' Dockerfile | grep -oP '2.2.\d+')-bin
  build23:
    name: Build v2.3
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: '2.3'
    steps:
    - uses: actions/checkout@v3
    # Build full image: binary with runtime
    - name: Build full image
      run: |
        docker build \
        --pull \
        --no-cache \
        --target binary-with-runtime \
        --tag composer/composer:2.3 \
        --tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.3.\d+' Dockerfile | grep -oP '2.3.\d+') \
        .
    # Build low-size image with binary only
    - name: Build binary-only image
      run: |
        docker build \
        --pull \
        --no-cache \
        --target standalone-binary \
        --tag composer/composer:2.3-bin \
        --tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.3.\d+' Dockerfile | grep -oP '2.3.\d+')-bin \
        .
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Push tag(s) to Docker Hub
      if: github.ref == 'refs/heads/main'
      run: |
        docker push composer/composer:2.3
        docker push composer/composer:2.3-bin
        docker push composer/composer:$(grep -oP 'COMPOSER_VERSION 2.3.\d+' Dockerfile | grep -oP '2.3.\d+')
        docker push composer/composer:$(grep -oP 'COMPOSER_VERSION 2.3.\d+' Dockerfile | grep -oP '2.3.\d+')-bin
    - name: Login to Amazon Public ECR
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v1
      with:
        registry: public.ecr.aws
        username: ${{ secrets.AWS_ECR_ACCESS_KEY }}
        password: ${{ secrets.AWS_ECR_SECRET_KEY }}
    - name: Push tag(s) to Amazon Public ECR
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag composer/composer:2.3 $ECR_REPO:2.3
        docker tag composer/composer:2.3-bin $ECR_REPO:2.3-bin
        docker tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.3.\d+' Dockerfile | grep -oP '2.3.\d+') $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.3.\d+' Dockerfile | grep -oP '2.3.\d+')
        docker tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.3.\d+' Dockerfile | grep -oP '2.3.\d+') $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.3.\d+' Dockerfile | grep -oP '2.3.\d+')-bin
        docker push $ECR_REPO:2.3
        docker push $ECR_REPO:2.3-bin
        docker push $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.3.\d+' Dockerfile | grep -oP '2.3.\d+')
        docker push $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.3.\d+' Dockerfile | grep -oP '2.3.\d+')-bin
  build24:
    name: Build v2.4
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: '2.4'
    steps:
      - uses: actions/checkout@v3
      # Build full image: binary with runtime
      - name: Build full image
        run: |
          docker build \
          --pull \
          --no-cache \
          --target binary-with-runtime \
          --tag composer/composer:2.4 \
          --tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.4.\d+' Dockerfile | grep -oP '2.4.\d+') \
          .
      # Build low-size image with binary only
      - name: Build binary-only image
        run: |
          docker build \
          --pull \
          --no-cache \
          --target standalone-binary \
          --tag composer/composer:2.4-bin \
          --tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.4.\d+' Dockerfile | grep -oP '2.4.\d+')-bin \
          .
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push tag(s) to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: |
          docker push composer/composer:2.4
          docker push composer/composer:2.4-bin
          docker push composer/composer:$(grep -oP 'COMPOSER_VERSION 2.4.\d+' Dockerfile | grep -oP '2.4.\d+')
          docker push composer/composer:$(grep -oP 'COMPOSER_VERSION 2.4.\d+' Dockerfile | grep -oP '2.4.\d+')-bin
      - name: Login to Amazon Public ECR
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          password: ${{ secrets.AWS_ECR_SECRET_KEY }}
      - name: Push tag(s) to Amazon Public ECR
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag composer/composer:2.4 $ECR_REPO:2.4
          docker tag composer/composer:2.4-bin $ECR_REPO:2.4-bin
          docker tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.4.\d+' Dockerfile | grep -oP '2.4.\d+') $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.4.\d+' Dockerfile | grep -oP '2.4.\d+')
          docker tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.4.\d+' Dockerfile | grep -oP '2.4.\d+') $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.4.\d+' Dockerfile | grep -oP '2.4.\d+')-bin
          docker push $ECR_REPO:2.4
          docker push $ECR_REPO:2.4-bin
          docker push $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.4.\d+' Dockerfile | grep -oP '2.4.\d+')
          docker push $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.4.\d+' Dockerfile | grep -oP '2.4.\d+')-bin
  build25:
    name: Build v2.5
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: '2.5'
    steps:
      - uses: actions/checkout@v3
      # Build full image: binary with runtime
      - name: Build full image
        run: |
          docker build \
          --pull \
          --no-cache \
          --target binary-with-runtime \
          --tag composer/composer:latest \
          --tag composer/composer:2 \
          --tag composer/composer:2.5 \
          --tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.5.\d+' Dockerfile | grep -oP '2.5.\d+') \
          .
      # Build low-size image with binary only
      - name: Build binary-only image
        run: |
          docker build \
          --pull \
          --no-cache \
          --target standalone-binary \
          --tag composer/composer:latest-bin \
          --tag composer/composer:2-bin \
          --tag composer/composer:2.5-bin \
          --tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.5.\d+' Dockerfile | grep -oP '2.5.\d+')-bin \
          .
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push tag(s) to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: |
          docker push composer/composer:latest
          docker push composer/composer:latest-bin
          docker push composer/composer:2
          docker push composer/composer:2-bin
          docker push composer/composer:2.5
          docker push composer/composer:2.5-bin
          docker push composer/composer:$(grep -oP 'COMPOSER_VERSION 2.5.\d+' Dockerfile | grep -oP '2.5.\d+')
          docker push composer/composer:$(grep -oP 'COMPOSER_VERSION 2.5.\d+' Dockerfile | grep -oP '2.5.\d+')-bin
      - name: Login to Amazon Public ECR
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ECR_ACCESS_KEY }}
          password: ${{ secrets.AWS_ECR_SECRET_KEY }}
      - name: Push tag(s) to Amazon Public ECR
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag composer/composer:latest $ECR_REPO:latest
          docker tag composer/composer:latest $ECR_REPO:latest-bin
          docker tag composer/composer:2 $ECR_REPO:2
          docker tag composer/composer:2 $ECR_REPO:2-bin
          docker tag composer/composer:2.5 $ECR_REPO:2.5
          docker tag composer/composer:2.5-bin $ECR_REPO:2.5-bin
          docker tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.5.\d+' Dockerfile | grep -oP '2.5.\d+') $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.5.\d+' Dockerfile | grep -oP '2.5.\d+')
          docker tag composer/composer:$(grep -oP 'COMPOSER_VERSION 2.5.\d+' Dockerfile | grep -oP '2.5.\d+') $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.5.\d+' Dockerfile | grep -oP '2.5.\d+')-bin
          docker push $ECR_REPO:latest
          docker push $ECR_REPO:latest-bin
          docker push $ECR_REPO:2
          docker push $ECR_REPO:2-bin
          docker push $ECR_REPO:2.5
          docker push $ECR_REPO:2.5-bin
          docker push $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.5.\d+' Dockerfile | grep -oP '2.5.\d+')
          docker push $ECR_REPO:$(grep -oP 'COMPOSER_VERSION 2.5.\d+' Dockerfile | grep -oP '2.5.\d+')-bin
